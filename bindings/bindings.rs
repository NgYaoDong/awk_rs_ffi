/* automatically generated by rust-bindgen 0.69.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const ENABLE_FEATURE_SYSLOG: u32 = 1;
pub const ENABLE_FEATURE_AWK_LIBM: u32 = 1;
pub const ENABLE_FEATURE_ALLOW_EXEC: u32 = 1;
pub const ENABLE_LOCALE_SUPPORT: u32 = 0;
pub const ENABLE_FEATURE_AWK_GNU_EXTENSIONS: u32 = 1;
pub const ENABLE_DESKTOP: u32 = 1;
pub const OFF_FMT: &[u8; 2] = b"l\0";
pub const ENABLE_DEBUG: u32 = 1;
pub const OPTSTR_AWK: &[u8; 15] = b"+F:v:*f:*e:*W:\0";
pub const MAXVARFMT: u32 = 240;
pub const MINNVBLOCK: u32 = 64;
pub const VF_NUMBER: u32 = 1;
pub const VF_ARRAY: u32 = 2;
pub const VF_CACHED: u32 = 256;
pub const VF_USER: u32 = 512;
pub const VF_SPECIAL: u32 = 1024;
pub const VF_WALK: u32 = 2048;
pub const VF_FSTR: u32 = 4096;
pub const VF_CHILD: u32 = 8192;
pub const VF_DIRTY: u32 = 16384;
pub const VF_DONTTOUCH: u32 = 27650;
pub const TC_SEQSTART: u32 = 1;
pub const TC_SEQTERM: u32 = 2;
pub const TC_REGEXP: u32 = 4;
pub const TC_OUTRDR: u32 = 8;
pub const TC_UOPPOST: u32 = 16;
pub const TC_UOPPRE1: u32 = 32;
pub const TC_BINOPX: u32 = 64;
pub const TC_IN: u32 = 128;
pub const TC_COMMA: u32 = 256;
pub const TC_PIPE: u32 = 512;
pub const TC_UOPPRE2: u32 = 1024;
pub const TC_ARRTERM: u32 = 2048;
pub const TC_GRPSTART: u32 = 4096;
pub const TC_GRPTERM: u32 = 8192;
pub const TC_SEMICOL: u32 = 16384;
pub const TC_NEWLINE: u32 = 32768;
pub const TC_STATX: u32 = 65536;
pub const TC_WHILE: u32 = 131072;
pub const TC_ELSE: u32 = 262144;
pub const TC_BUILTIN: u32 = 524288;
pub const TC_LENGTH: u32 = 1048576;
pub const TC_GETLINE: u32 = 2097152;
pub const TC_FUNCDECL: u32 = 4194304;
pub const TC_BEGIN: u32 = 8388608;
pub const TC_END: u32 = 16777216;
pub const TC_EOF: u32 = 33554432;
pub const TC_VARIABLE: u32 = 67108864;
pub const TC_ARRAY: u32 = 134217728;
pub const TC_FUNCTION: u32 = 268435456;
pub const TC_STRING: u32 = 536870912;
pub const TC_NUMBER: u32 = 1073741824;
pub const TC_UOPPRE: u32 = 1056;
pub const TC_BINOP: u32 = 960;
pub const TC_OPERAND: u32 = 2084044801;
pub const TC_STATEMNT: u32 = 196608;
pub const TC_OPTERM: u32 = 49152;
pub const TC_WORD: u32 = 33489024;
pub const TC_NOTERM: u32 = 62400;
pub const TC_OPSEQ: u32 = 2084045861;
pub const TC_GRPSEQ: u32 = 2084295717;
pub const TC_CONCAT1: u32 = 1678772242;
pub const TC_CONCAT2: u32 = 2084045857;
pub const OF_RES1: u32 = 65536;
pub const OF_RES2: u32 = 131072;
pub const OF_STR1: u32 = 262144;
pub const OF_STR2: u32 = 524288;
pub const OF_NUM1: u32 = 1048576;
pub const OF_CHECKED: u32 = 2097152;
pub const OF_REQUIRED: u32 = 4194304;
pub const xx: u32 = 0;
pub const xV: u32 = 131072;
pub const xS: u32 = 655360;
pub const Vx: u32 = 65536;
pub const Rx: u32 = 5308416;
pub const VV: u32 = 196608;
pub const Nx: u32 = 1114112;
pub const NV: u32 = 1245184;
pub const Sx: u32 = 327680;
pub const SV: u32 = 458752;
pub const SS: u32 = 983040;
pub const OPCLSMASK: u32 = 65280;
pub const OPNMASK: u32 = 127;
pub const PRIMASK: u32 = 2130706432;
pub const PRIMASK2: u32 = 2113929216;
pub const SHIFT_TIL_THIS: u32 = 1536;
pub const RECUR_FROM_THIS: u32 = 4096;
pub const NTC: &[u8; 2] = b"\xFF\0";
pub const NTCC: u8 = 255u8;
pub const FIRST_PRIME: u32 = 61;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regex_t {
    pub __due_to_size: [usize; 8usize],
}
pub type regoff_t = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FILE {
    _unused: [u8; 0],
}
pub type smallint = ::std::os::raw::c_schar;
pub type smalluint = ::std::os::raw::c_uchar;
pub const LOGMODE_NONE: _bindgen_ty_1 = 0;
pub const LOGMODE_STDIO: _bindgen_ty_1 = 1;
pub const LOGMODE_SYSLOG: _bindgen_ty_1 = 2;
pub const LOGMODE_BOTH: _bindgen_ty_1 = 3;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn safe_strncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn overlapping_strcpy(dst: *mut ::std::os::raw::c_char, src: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn bb_die_memory_exhausted();
}
extern "C" {
    pub fn bb_simple_error_msg(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn bb_simple_perror_msg_and_die(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn bb_simple_perror_msg(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static ptr_to_globals: *mut globals;
}
extern "C" {
    pub fn xstrdup(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xsetegid(egid: gid_t);
}
extern "C" {
    pub fn xseteuid(euid: uid_t);
}
extern "C" {
    pub fn full_write(
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn xmalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xzalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xrealloc(old: *mut ::std::os::raw::c_void, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn bb_process_escape_sequence(
        ptr: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcpy_and_process_escape_sequences(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn utoa(n: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(n: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn is_prefixed_with(
        string: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn is_suffixed_with(
        string: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn skip_whitespace(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn safe_read(
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn xstrndup(
        s: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endofname(name: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xopen_stdin(pathname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_or_warn(
        pathname: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen_or_warn(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn xfopen_stdin(filename: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn xfopen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_all() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llist_t {
    pub link: *mut llist_t,
    pub data: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn llist_add_to(old_head: *mut *mut llist_t, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn llist_add_to_end(list_head: *mut *mut llist_t, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn llist_pop(elm: *mut *mut llist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn llist_unlink(head: *mut *mut llist_t, elm: *mut llist_t);
}
extern "C" {
    pub fn llist_free(
        elm: *mut llist_t,
        freeit: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn getopt32(
        argv: *mut *mut ::std::os::raw::c_char,
        applet_opts: *const ::std::os::raw::c_char,
        ...
    ) -> u32;
}
extern "C" {
    pub fn getoptind() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bb_show_usage();
}
extern "C" {
    pub fn xmalloc_read(
        fd: ::std::os::raw::c_int,
        maxsz_p: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xfunc_die();
}
extern "C" {
    pub fn full_read(
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        count: usize,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct suffix_mult {
    pub suffix: [::std::os::raw::c_char; 4usize],
    pub mult: u32,
}
extern "C" {
    pub fn xatoi_positive(numstr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut applet_name: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn awk_main(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regcomp_or_errmsg(
        preg: *mut regex_t,
        regex: *const ::std::os::raw::c_char,
        cflags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xregcomp(
        preg: *mut regex_t,
        regex: *const ::std::os::raw::c_char,
        cflags: ::std::os::raw::c_int,
    );
}
pub const OPTBIT_F: _bindgen_ty_2 = 0;
pub const OPTBIT_v: _bindgen_ty_2 = 1;
pub const OPTBIT_f: _bindgen_ty_2 = 2;
pub const OPTBIT_e: _bindgen_ty_2 = 3;
pub const OPTBIT_W: _bindgen_ty_2 = 4;
pub const OPT_F: _bindgen_ty_2 = 1;
pub const OPT_v: _bindgen_ty_2 = 2;
pub const OPT_f: _bindgen_ty_2 = 4;
pub const OPT_e: _bindgen_ty_2 = 8;
pub const OPT_W: _bindgen_ty_2 = 16;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct walker_list {
    pub end: *mut ::std::os::raw::c_char,
    pub cur: *mut ::std::os::raw::c_char,
    pub prev: *mut walker_list,
    pub wbuf: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct var_s {
    pub type_: ::std::os::raw::c_uint,
    pub number: f64,
    pub string: *mut ::std::os::raw::c_char,
    pub x: var_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union var_s__bindgen_ty_1 {
    pub aidx: ::std::os::raw::c_int,
    pub array: *mut xhash_s,
    pub parent: *mut var_s,
    pub walker: *mut walker_list,
}
pub type var = var_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chain_s {
    pub first: *mut node_s,
    pub last: *mut node_s,
    pub programname: *const ::std::os::raw::c_char,
}
pub type chain = chain_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct func_s {
    pub nargs: ::std::os::raw::c_uint,
    pub body: chain_s,
}
pub type func = func_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rstream_s {
    pub F: *mut FILE,
    pub buffer: *mut ::std::os::raw::c_char,
    pub adv: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub pos: ::std::os::raw::c_int,
    pub is_pipe: smallint,
}
pub type rstream = rstream_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hash_item_s {
    pub data: hash_item_s__bindgen_ty_1,
    pub next: *mut hash_item_s,
    pub name: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hash_item_s__bindgen_ty_1 {
    pub v: var_s,
    pub rs: rstream_s,
    pub f: func_s,
}
pub type hash_item = hash_item_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xhash_s {
    pub nel: ::std::os::raw::c_uint,
    pub csize: ::std::os::raw::c_uint,
    pub nprime: ::std::os::raw::c_uint,
    pub glen: ::std::os::raw::c_uint,
    pub items: *mut *mut hash_item_s,
}
pub type xhash = xhash_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct node_s {
    pub info: u32,
    pub lineno: ::std::os::raw::c_uint,
    pub l: node_s__bindgen_ty_1,
    pub r: node_s__bindgen_ty_2,
    pub a: node_s__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union node_s__bindgen_ty_1 {
    pub n: *mut node_s,
    pub v: *mut var,
    pub aidx: ::std::os::raw::c_int,
    pub new_progname: *mut ::std::os::raw::c_char,
    pub re: *mut regex_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union node_s__bindgen_ty_2 {
    pub n: *mut node_s,
    pub ire: *mut regex_t,
    pub f: *mut func,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union node_s__bindgen_ty_3 {
    pub n: *mut node_s,
}
pub type node = node_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvblock_s {
    pub size: ::std::os::raw::c_int,
    pub pos: *mut var,
    pub prev: *mut nvblock_s,
    pub next: *mut nvblock_s,
}
pub type nvblock = nvblock_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tsplitter_s {
    pub n: node,
    pub re: [regex_t; 2usize],
}
pub type tsplitter = tsplitter_s;
pub const OC_DELETE: _bindgen_ty_3 = 256;
pub const OC_EXEC: _bindgen_ty_3 = 512;
pub const OC_NEWSOURCE: _bindgen_ty_3 = 768;
pub const OC_PRINT: _bindgen_ty_3 = 1024;
pub const OC_PRINTF: _bindgen_ty_3 = 1280;
pub const OC_WALKINIT: _bindgen_ty_3 = 1536;
pub const OC_BR: _bindgen_ty_3 = 1792;
pub const OC_BREAK: _bindgen_ty_3 = 2048;
pub const OC_CONTINUE: _bindgen_ty_3 = 2304;
pub const OC_EXIT: _bindgen_ty_3 = 2560;
pub const OC_NEXT: _bindgen_ty_3 = 2816;
pub const OC_NEXTFILE: _bindgen_ty_3 = 3072;
pub const OC_TEST: _bindgen_ty_3 = 3328;
pub const OC_WALKNEXT: _bindgen_ty_3 = 3584;
pub const OC_BINARY: _bindgen_ty_3 = 4096;
pub const OC_BUILTIN: _bindgen_ty_3 = 4352;
pub const OC_COLON: _bindgen_ty_3 = 4608;
pub const OC_COMMA: _bindgen_ty_3 = 4864;
pub const OC_COMPARE: _bindgen_ty_3 = 5120;
pub const OC_CONCAT: _bindgen_ty_3 = 5376;
pub const OC_FBLTIN: _bindgen_ty_3 = 5632;
pub const OC_FIELD: _bindgen_ty_3 = 5888;
pub const OC_FNARG: _bindgen_ty_3 = 6144;
pub const OC_FUNC: _bindgen_ty_3 = 6400;
pub const OC_GETLINE: _bindgen_ty_3 = 6656;
pub const OC_IN: _bindgen_ty_3 = 6912;
pub const OC_LAND: _bindgen_ty_3 = 7168;
pub const OC_LOR: _bindgen_ty_3 = 7424;
pub const OC_MATCH: _bindgen_ty_3 = 7680;
pub const OC_MOVE: _bindgen_ty_3 = 7936;
pub const OC_PGETLINE: _bindgen_ty_3 = 8192;
pub const OC_REGEXP: _bindgen_ty_3 = 8448;
pub const OC_REPLACE: _bindgen_ty_3 = 8704;
pub const OC_RETURN: _bindgen_ty_3 = 8960;
pub const OC_SPRINTF: _bindgen_ty_3 = 9216;
pub const OC_TERNARY: _bindgen_ty_3 = 9472;
pub const OC_UNARY: _bindgen_ty_3 = 9728;
pub const OC_VAR: _bindgen_ty_3 = 9984;
pub const OC_DONE: _bindgen_ty_3 = 10240;
pub const ST_IF: _bindgen_ty_3 = 12288;
pub const ST_DO: _bindgen_ty_3 = 12544;
pub const ST_FOR: _bindgen_ty_3 = 12800;
pub const ST_WHILE: _bindgen_ty_3 = 13056;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const F_in: _bindgen_ty_4 = 0;
pub const F_rn: _bindgen_ty_4 = 1;
pub const F_co: _bindgen_ty_4 = 2;
pub const F_ex: _bindgen_ty_4 = 3;
pub const F_lg: _bindgen_ty_4 = 4;
pub const F_si: _bindgen_ty_4 = 5;
pub const F_sq: _bindgen_ty_4 = 6;
pub const F_sr: _bindgen_ty_4 = 7;
pub const F_ti: _bindgen_ty_4 = 8;
pub const F_le: _bindgen_ty_4 = 9;
pub const F_sy: _bindgen_ty_4 = 10;
pub const F_ff: _bindgen_ty_4 = 11;
pub const F_cl: _bindgen_ty_4 = 12;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const B_a2: _bindgen_ty_5 = 0;
pub const B_ix: _bindgen_ty_5 = 1;
pub const B_ma: _bindgen_ty_5 = 2;
pub const B_sp: _bindgen_ty_5 = 3;
pub const B_ss: _bindgen_ty_5 = 4;
pub const B_ti: _bindgen_ty_5 = 5;
pub const B_mt: _bindgen_ty_5 = 6;
pub const B_lo: _bindgen_ty_5 = 7;
pub const B_up: _bindgen_ty_5 = 8;
pub const B_ge: _bindgen_ty_5 = 9;
pub const B_gs: _bindgen_ty_5 = 10;
pub const B_su: _bindgen_ty_5 = 11;
pub const B_an: _bindgen_ty_5 = 12;
pub const B_co: _bindgen_ty_5 = 13;
pub const B_ls: _bindgen_ty_5 = 14;
pub const B_or: _bindgen_ty_5 = 15;
pub const B_rs: _bindgen_ty_5 = 16;
pub const B_xo: _bindgen_ty_5 = 17;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const CONVFMT: _bindgen_ty_6 = 0;
pub const OFMT: _bindgen_ty_6 = 1;
pub const FS: _bindgen_ty_6 = 2;
pub const OFS: _bindgen_ty_6 = 3;
pub const ORS: _bindgen_ty_6 = 4;
pub const RS: _bindgen_ty_6 = 5;
pub const RT: _bindgen_ty_6 = 6;
pub const FILENAME: _bindgen_ty_6 = 7;
pub const SUBSEP: _bindgen_ty_6 = 8;
pub const F0: _bindgen_ty_6 = 9;
pub const ARGIND: _bindgen_ty_6 = 10;
pub const ARGC: _bindgen_ty_6 = 11;
pub const ARGV: _bindgen_ty_6 = 12;
pub const ERRNO: _bindgen_ty_6 = 13;
pub const FNR: _bindgen_ty_6 = 14;
pub const NR: _bindgen_ty_6 = 15;
pub const NF: _bindgen_ty_6 = 16;
pub const IGNORECASE: _bindgen_ty_6 = 17;
pub const ENVIRON: _bindgen_ty_6 = 18;
pub const NUM_INTERNAL_VARS: _bindgen_ty_6 = 19;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct globals {
    pub t_double: f64,
    pub beginseq: chain,
    pub mainseq: chain,
    pub endseq: chain,
    pub seq: *mut chain,
    pub break_ptr: *mut node,
    pub continue_ptr: *mut node,
    pub iF: *mut rstream,
    pub vhash: *mut xhash,
    pub ahash: *mut xhash,
    pub fdhash: *mut xhash,
    pub fnhash: *mut xhash,
    pub g_progname: *const ::std::os::raw::c_char,
    pub g_lineno: ::std::os::raw::c_int,
    pub nfields: ::std::os::raw::c_int,
    pub maxfields: ::std::os::raw::c_int,
    pub Fields: *mut var,
    pub g_cb: *mut nvblock,
    pub g_pos: *mut ::std::os::raw::c_char,
    pub g_buf: *mut ::std::os::raw::c_char,
    pub icase: smallint,
    pub exiting: smallint,
    pub nextrec: smallint,
    pub nextfile: smallint,
    pub is_f0_split: smallint,
    pub t_rollback: smallint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct globals2 {
    pub t_info: u32,
    pub t_tclass: u32,
    pub t_string: *mut ::std::os::raw::c_char,
    pub t_lineno: ::std::os::raw::c_int,
    pub intvar: [*mut var; 19usize],
    pub split_f0__fstrings: *mut ::std::os::raw::c_char,
    pub next_token__save_tclass: u32,
    pub next_token__save_info: u32,
    pub next_token__ltclass: u32,
    pub next_token__concat_inserted: smallint,
    pub next_input_file__files_happen: smallint,
    pub next_input_file__rsm: rstream,
    pub evaluate__fnargs: *mut var,
    pub evaluate__seed: ::std::os::raw::c_uint,
    pub evaluate__sreg: regex_t,
    pub ptest__v: var,
    pub exec_builtin__tspl: tsplitter,
    pub fsplitter: tsplitter,
    pub rsplitter: tsplitter,
}
extern "C" {
    pub fn init_g();
}
extern "C" {
    pub fn zero_out_var(vp: *mut var);
}
extern "C" {
    pub fn syntax_error(message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hashidx(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hash_init() -> *mut xhash;
}
extern "C" {
    pub fn hash_search(
        hash: *mut xhash,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hash_rebuild(hash: *mut xhash);
}
extern "C" {
    pub fn hash_find(
        hash: *mut xhash,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hash_remove(hash: *mut xhash, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn skip_spaces(p: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nextword(s: *mut *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nextchar(s: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn unescape_string_in_place(s1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn isalnum_(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn my_strtod(pp: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn iamarray(v: *mut var) -> *mut xhash;
}
extern "C" {
    pub fn clear_array(array: *mut xhash);
}
extern "C" {
    pub fn clrvar(v: *mut var) -> *mut var;
}
extern "C" {
    pub fn setvar_p(v: *mut var, value: *mut ::std::os::raw::c_char) -> *mut var;
}
extern "C" {
    pub fn setvar_s(v: *mut var, value: *const ::std::os::raw::c_char) -> *mut var;
}
extern "C" {
    pub fn setvar_u(v: *mut var, value: *const ::std::os::raw::c_char) -> *mut var;
}
extern "C" {
    pub fn setari_u(a: *mut var, idx: ::std::os::raw::c_int, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvar_i(v: *mut var, value: f64) -> *mut var;
}
extern "C" {
    pub fn getvar_s(v: *mut var) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getvar_i(v: *mut var) -> f64;
}
extern "C" {
    pub fn getvar_i_int(v: *mut var) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn copyvar(dest: *mut var, src: *const var) -> *mut var;
}
extern "C" {
    pub fn incvar(v: *mut var) -> *mut var;
}
extern "C" {
    pub fn is_numeric(v: *mut var) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn istrue(v: *mut var) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvalloc(n: ::std::os::raw::c_int) -> *mut var;
}
extern "C" {
    pub fn nvfree(v: *mut var);
}
extern "C" {
    pub fn next_token(expected: u32) -> u32;
}
extern "C" {
    pub fn rollback_token();
}
extern "C" {
    pub fn new_node(info: u32) -> *mut node;
}
extern "C" {
    pub fn mk_re_node(s: *const ::std::os::raw::c_char, n: *mut node, re: *mut regex_t);
}
extern "C" {
    pub fn condition() -> *mut node;
}
extern "C" {
    pub fn parse_expr(iexp: u32) -> *mut node;
}
extern "C" {
    pub fn chain_node(info: u32) -> *mut node;
}
extern "C" {
    pub fn chain_expr(info: u32);
}
extern "C" {
    pub fn chain_loop(nn: *mut node) -> *mut node;
}
extern "C" {
    pub fn chain_group();
}
extern "C" {
    pub fn parse_program(p: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn mk_splitter(s: *const ::std::os::raw::c_char, spl: *mut tsplitter) -> *mut node;
}
extern "C" {
    pub fn as_regex(op: *mut node, preg: *mut regex_t) -> *mut regex_t;
}
extern "C" {
    pub fn qrealloc(
        b: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsrealloc(size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn regexec1_nonempty(
        preg: *const regex_t,
        s: *const ::std::os::raw::c_char,
        pmatch: *mut regmatch_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn awk_split(
        s: *const ::std::os::raw::c_char,
        spl: *mut node,
        slist: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn split_f0();
}
extern "C" {
    pub fn handle_special(v: *mut var);
}
extern "C" {
    pub fn nextarg(pn: *mut *mut node) -> *mut node;
}
extern "C" {
    pub fn hashwalk_init(v: *mut var, array: *mut xhash);
}
extern "C" {
    pub fn hashwalk_next(v: *mut var) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptest(pattern: *mut node) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn awk_getline(rsm: *mut rstream, v: *mut var) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmt_num(
        b: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        n: f64,
        int_as_int: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn awk_printf(n: *mut node) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn awk_sub(
        rn: *mut node,
        repl: *const ::std::os::raw::c_char,
        nm: ::std::os::raw::c_int,
        src: *mut var,
        dest: *mut var,
        subexp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_mktime(ds: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exec_builtin(op: *mut node, res: *mut var) -> *mut var;
}
extern "C" {
    pub fn evaluate(op: *mut node, res: *mut var) -> *mut var;
}
extern "C" {
    pub fn awk_exit(r: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_assignment(expr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn next_input_file() -> *mut rstream;
}
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regexec(
        __preg: *const regex_t,
        __String: *const ::std::os::raw::c_char,
        __nmatch: usize,
        __pmatch: *mut regmatch_t,
        __eflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn regfree(__preg: *mut regex_t);
}
extern "C" {
    pub fn fopen_for_read(path: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static vNames: [::std::os::raw::c_char; 107usize];
}
extern "C" {
    pub static vValues: [::std::os::raw::c_char; 25usize];
}
extern "C" {
    pub static PRIMES: [u16; 5usize];
}
extern "C" {
    pub static tokenlist: [::std::os::raw::c_char; 448usize];
}
extern "C" {
    pub static tokeninfo: [u32; 100usize];
}
extern "C" {
    pub static EMSG_INTERNAL_ERROR: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_UNEXP_EOS: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_UNEXP_TOKEN: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_DIV_BY_ZERO: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_INV_FMT: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_TOO_FEW_ARGS: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_NOT_ARRAY: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_POSSIBLE_ERROR: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_UNDEF_FUNC: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_NO_MATH: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static EMSG_NEGATIVE_FIELD: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn print_intvar();
}
extern "C" {
    pub fn print_var(v: *mut var_s);
}
extern "C" {
    pub fn print_rstream(rs: *mut rstream_s);
}
